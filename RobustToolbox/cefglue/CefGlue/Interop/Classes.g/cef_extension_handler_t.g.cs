//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_extension_handler_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_extension_handler_t*, CefErrorCode, void> _on_extension_load_failed;
        internal delegate* unmanaged<cef_extension_handler_t*, cef_extension_t*, void> _on_extension_loaded;
        internal delegate* unmanaged<cef_extension_handler_t*, cef_extension_t*, void> _on_extension_unloaded;
        internal delegate* unmanaged<cef_extension_handler_t*, cef_extension_t*, cef_string_t*, cef_client_t**, cef_browser_settings_t*, int> _on_before_background_browser;
        internal delegate* unmanaged<cef_extension_handler_t*, cef_extension_t*, cef_browser_t*, cef_browser_t*, int, cef_string_t*, int, cef_window_info_t*, cef_client_t**, cef_browser_settings_t*, int> _on_before_browser;
        internal delegate* unmanaged<cef_extension_handler_t*, cef_extension_t*, cef_browser_t*, int, cef_browser_t*> _get_active_browser;
        internal delegate* unmanaged<cef_extension_handler_t*, cef_extension_t*, cef_browser_t*, int, cef_browser_t*, int> _can_access_browser;
        internal delegate* unmanaged<cef_extension_handler_t*, cef_extension_t*, cef_browser_t*, cef_string_t*, cef_get_extension_resource_callback_t*, int> _get_extension_resource;
        
        internal GCHandle _obj;
        
        [UnmanagedCallersOnly]
        public static void add_ref(cef_extension_handler_t* self)
        {
            var obj = (CefExtensionHandler)self->_obj.Target;
            obj.add_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int release(cef_extension_handler_t* self)
        {
            var obj = (CefExtensionHandler)self->_obj.Target;
            return obj.release(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_one_ref(cef_extension_handler_t* self)
        {
            var obj = (CefExtensionHandler)self->_obj.Target;
            return obj.has_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_at_least_one_ref(cef_extension_handler_t* self)
        {
            var obj = (CefExtensionHandler)self->_obj.Target;
            return obj.has_at_least_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static void on_extension_load_failed(cef_extension_handler_t* self, CefErrorCode result)
        {
            var obj = (CefExtensionHandler)self->_obj.Target;
            obj.on_extension_load_failed(self, result);
        }
        
        [UnmanagedCallersOnly]
        public static void on_extension_loaded(cef_extension_handler_t* self, cef_extension_t* extension)
        {
            var obj = (CefExtensionHandler)self->_obj.Target;
            obj.on_extension_loaded(self, extension);
        }
        
        [UnmanagedCallersOnly]
        public static void on_extension_unloaded(cef_extension_handler_t* self, cef_extension_t* extension)
        {
            var obj = (CefExtensionHandler)self->_obj.Target;
            obj.on_extension_unloaded(self, extension);
        }
        
        [UnmanagedCallersOnly]
        public static int on_before_background_browser(cef_extension_handler_t* self, cef_extension_t* extension, cef_string_t* url, cef_client_t** client, cef_browser_settings_t* settings)
        {
            var obj = (CefExtensionHandler)self->_obj.Target;
            return obj.on_before_background_browser(self, extension, url, client, settings);
        }
        
        [UnmanagedCallersOnly]
        public static int on_before_browser(cef_extension_handler_t* self, cef_extension_t* extension, cef_browser_t* browser, cef_browser_t* active_browser, int index, cef_string_t* url, int active, cef_window_info_t* windowInfo, cef_client_t** client, cef_browser_settings_t* settings)
        {
            var obj = (CefExtensionHandler)self->_obj.Target;
            return obj.on_before_browser(self, extension, browser, active_browser, index, url, active, windowInfo, client, settings);
        }
        
        [UnmanagedCallersOnly]
        public static cef_browser_t* get_active_browser(cef_extension_handler_t* self, cef_extension_t* extension, cef_browser_t* browser, int include_incognito)
        {
            var obj = (CefExtensionHandler)self->_obj.Target;
            return obj.get_active_browser(self, extension, browser, include_incognito);
        }
        
        [UnmanagedCallersOnly]
        public static int can_access_browser(cef_extension_handler_t* self, cef_extension_t* extension, cef_browser_t* browser, int include_incognito, cef_browser_t* target_browser)
        {
            var obj = (CefExtensionHandler)self->_obj.Target;
            return obj.can_access_browser(self, extension, browser, include_incognito, target_browser);
        }
        
        [UnmanagedCallersOnly]
        public static int get_extension_resource(cef_extension_handler_t* self, cef_extension_t* extension, cef_browser_t* browser, cef_string_t* file, cef_get_extension_resource_callback_t* callback)
        {
            var obj = (CefExtensionHandler)self->_obj.Target;
            return obj.get_extension_resource(self, extension, browser, file, callback);
        }
        
        internal static cef_extension_handler_t* Alloc(CefExtensionHandler obj)
        {
            var ptr = (cef_extension_handler_t*)NativeMemory.Alloc((UIntPtr)sizeof(cef_extension_handler_t));
            *ptr = default(cef_extension_handler_t);
            ptr->_base._size = (UIntPtr)sizeof(cef_extension_handler_t);
            ptr->_obj = GCHandle.Alloc(obj);
            ptr->_base._add_ref = (delegate* unmanaged<cef_base_ref_counted_t*, void>)(delegate* unmanaged<cef_extension_handler_t*, void>)&add_ref;
            ptr->_base._release = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_extension_handler_t*, int>)&release;
            ptr->_base._has_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_extension_handler_t*, int>)&has_one_ref;
            ptr->_base._has_at_least_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_extension_handler_t*, int>)&has_at_least_one_ref;
            ptr->_on_extension_load_failed = &on_extension_load_failed;
            ptr->_on_extension_loaded = &on_extension_loaded;
            ptr->_on_extension_unloaded = &on_extension_unloaded;
            ptr->_on_before_background_browser = &on_before_background_browser;
            ptr->_on_before_browser = &on_before_browser;
            ptr->_get_active_browser = &get_active_browser;
            ptr->_can_access_browser = &can_access_browser;
            ptr->_get_extension_resource = &get_extension_resource;
            return ptr;
        }
        
        internal static void Free(cef_extension_handler_t* ptr)
        {
            ptr->_obj.Free();
            NativeMemory.Free((void*)ptr);
        }
        
    }
}
